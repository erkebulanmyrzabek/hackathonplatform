# Generated by Django 5.1.6 on 2025-03-05 08:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hackathon', '0005_tag_hackathon_participants_count_and_more'),
        ('user', '0003_user_level_user_xp'),
    ]

    operations = [
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('new_users', models.PositiveIntegerField(default=0)),
                ('active_users', models.PositiveIntegerField(default=0)),
                ('hackathons_created', models.PositiveIntegerField(default=0)),
                ('hackathons_completed', models.PositiveIntegerField(default=0)),
                ('solutions_submitted', models.PositiveIntegerField(default=0)),
                ('transactions_completed', models.PositiveIntegerField(default=0)),
                ('total_crystals_spent', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Аналитика',
                'verbose_name_plural': 'Аналитика',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='AdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Создание'), ('update', 'Обновление'), ('delete', 'Удаление'), ('approve', 'Одобрение'), ('reject', 'Отклонение'), ('block', 'Блокировка'), ('unblock', 'Разблокировка'), ('other', 'Другое')], max_length=10)),
                ('entity_type', models.CharField(help_text='Тип сущности (пользователь, хакатон и т.д.)', max_length=50)),
                ('entity_id', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_logs', to='user.user')),
            ],
            options={
                'verbose_name': 'Лог администратора',
                'verbose_name_plural': 'Логи администраторов',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HackathonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('expected_start_date', models.DateField()),
                ('expected_end_date', models.DateField()),
                ('expected_participants', models.PositiveIntegerField()),
                ('prize_pool', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'На рассмотрении'), ('approved', 'Одобрено'), ('rejected', 'Отклонено')], default='pending', max_length=10)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to='user.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hackathon_requests', to='user.user')),
            ],
            options={
                'verbose_name': 'Запрос на хакатон',
                'verbose_name_plural': 'Запросы на хакатоны',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('blocked_until', models.DateTimeField(blank=True, help_text='Если пусто, то блокировка постоянная', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to='user.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks', to='user.user')),
            ],
            options={
                'verbose_name': 'Блокировка пользователя',
                'verbose_name_plural': 'Блокировки пользователей',
            },
        ),
        migrations.CreateModel(
            name='AdminRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('moderator', 'Модератор'), ('content_manager', 'Контент-менеджер'), ('organizer', 'Организатор'), ('analyst', 'Аналитик')], max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to='user.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_roles', to='user.user')),
            ],
            options={
                'verbose_name': 'Роль администратора',
                'verbose_name_plural': 'Роли администраторов',
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='OrganizerDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participants_count', models.PositiveIntegerField(default=0)),
                ('teams_count', models.PositiveIntegerField(default=0)),
                ('solutions_count', models.PositiveIntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to='hackathon.hackathon')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organizer_dashboards', to='user.user')),
            ],
            options={
                'verbose_name': 'Дашборд организатора',
                'verbose_name_plural': 'Дашборды организаторов',
                'unique_together': {('organizer', 'hackathon')},
            },
        ),
    ]
