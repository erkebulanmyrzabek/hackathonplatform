# Generated by Django 5.1.6 on 2025-03-05 08:51

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('community', '0001_initial'),
        ('user', '0003_user_level_user_xp'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='team',
            options={'verbose_name': 'Команда', 'verbose_name_plural': 'Команды'},
        ),
        migrations.RemoveField(
            model_name='team',
            name='user1',
        ),
        migrations.RemoveField(
            model_name='team',
            name='user2',
        ),
        migrations.RemoveField(
            model_name='team',
            name='user3',
        ),
        migrations.RemoveField(
            model_name='team',
            name='user4',
        ),
        migrations.AddField(
            model_name='team',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='team',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='leader',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='led_community_teams', to='user.user'),
        ),
        migrations.AddField(
            model_name='team',
            name='max_members',
            field=models.PositiveIntegerField(default=4),
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(related_name='community_teams', to='user.user'),
        ),
        migrations.AddField(
            model_name='team',
            name='status',
            field=models.CharField(choices=[('open', 'Открытая'), ('closed', 'Закрытая')], default='open', max_length=10),
        ),
        migrations.CreateModel(
            name='CommunityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('meetup', 'Митап'), ('workshop', 'Воркшоп'), ('conference', 'Конференция'), ('other', 'Другое')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('online_url', models.URLField(blank=True, null=True)),
                ('max_participants', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_community_events', to='user.user')),
                ('participants', models.ManyToManyField(blank=True, related_name='community_events', to='user.user')),
            ],
            options={
                'verbose_name': 'Событие сообщества',
                'verbose_name_plural': 'События сообщества',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to='user.user')),
            ],
            options={
                'verbose_name': 'Поиск пользователя',
                'verbose_name_plural': 'Поиски пользователей',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Ожидание'), ('accepted', 'Принято'), ('rejected', 'Отклонено')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='user.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='user.user')),
            ],
            options={
                'verbose_name': 'Дружба',
                'verbose_name_plural': 'Дружба',
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(choices=[('week', 'Неделя'), ('month', 'Месяц'), ('year', 'Год'), ('all_time', 'За все время')], max_length=10)),
                ('score', models.PositiveIntegerField(default=0)),
                ('rank', models.PositiveIntegerField()),
                ('hackathons_won', models.PositiveIntegerField(default=0)),
                ('hackathons_participated', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='user.user')),
            ],
            options={
                'verbose_name': 'Лидерборд',
                'verbose_name_plural': 'Лидерборды',
                'ordering': ['rank'],
                'unique_together': {('user', 'period')},
            },
        ),
    ]
