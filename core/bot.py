import os
import django
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.utils import timezone
from django.db.models import Count, Sum, Avg

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()

from user.models import User, UserNotification
from hackathon.models import Hackathon, Team, Solution
from feed.models import Webinar, Casecup
from admin_panel.models import HackathonRequest

TOKEN = settings.TOKEN
WEB_APP_URL = "https://8c2b-2a03-32c0-a001-c5fd-610d-4a9-e041-d4e6.ngrok-free.app/feed"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReportState(StatesGroup):
    waiting_for_report = State()

class HackathonRequestState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_participants = State()
    waiting_for_prize_pool = State()
    waiting_for_confirmation = State()

@sync_to_async
def get_or_create_user(telegram_id, name):
    user, created = User.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name, "hash_code": uuid.uuid4().hex[:16]},
    )
    return user, created

@sync_to_async
def get_user(telegram_id):
    try:
        return User.objects.get(telegram_id=telegram_id)
    except ObjectDoesNotExist:
        return None

@sync_to_async
def get_user_notifications(user, limit=5):
    return list(UserNotification.objects.filter(user=user, is_read=False).order_by('-created_at')[:limit])

@sync_to_async
def mark_notification_as_read(notification_id):
    try:
        notification = UserNotification.objects.get(id=notification_id)
        notification.is_read = True
        notification.save()
        return True
    except ObjectDoesNotExist:
        return False

@sync_to_async
def get_upcoming_hackathons(limit=5):
    now = timezone.now().date()
    return list(Hackathon.objects.filter(
        start_hackathon__gt=now
    ).order_by('start_hackathon')[:limit])

@sync_to_async
def get_user_hackathons(user, limit=5):
    return list(user.hackathons.all().order_by('-start_hackathon')[:limit])

@sync_to_async
def create_hackathon_request(user, title, description, start_date, end_date, participants, prize_pool):
    request = HackathonRequest.objects.create(
        user=user,
        title=title,
        description=description,
        expected_start_date=start_date,
        expected_end_date=end_date,
        expected_participants=participants,
        prize_pool=prize_pool
    )
    return request

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name or message.from_user.username

    user, created = await get_or_create_user(telegram_id, name)
    user_url = f"{WEB_APP_URL}?hash={user.hash_code}"

    keyboard = InlineKeyboardMarkup(row_width=1)
    web_app_button = InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=user_url))
    keyboard.add(web_app_button)

    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤!"
    
    if created:
        welcome_text += "\n\n–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Mini App, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
    
    welcome_text += "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/next-level - –°–∫–æ–ª—å–∫–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è\n/report - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n/FAQ - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n/notifications - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/upcoming - –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω—ã\n/my_hackathons - –ú–æ–∏ —Ö–∞–∫–∞—Ç–æ–Ω—ã\n/request_hackathon - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞"

    await message.answer(welcome_text, reply_markup=keyboard)

@dp.message_handler(commands=["stats"])
async def stats_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        hackathons_count = await sync_to_async(user.participation_count)()
        
        stats_text = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        stats_text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
        stats_text += f"‚≠ê XP: {user.xp}\n"
        stats_text += f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {user.coin}\n"
        stats_text += f"üéØ –£—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö: {hackathons_count}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements_count = await sync_to_async(lambda: user.achievements.count())()
        stats_text += f"üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {achievements_count}\n"
        
        await message.answer(stats_text)
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=["next-level"])
async def next_level_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        xp_needed = await sync_to_async(user.xp_to_next_level)()
        current_level = user.level
        next_level = current_level + 1
        
        await message.answer(f"üéØ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\nüìà –î–æ —É—Ä–æ–≤–Ω—è {next_level} –æ—Å—Ç–∞–ª–æ—Å—å {xp_needed} XP!")
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=["report"])
async def report_command(message: types.Message):
    await ReportState.waiting_for_report.set()
    await message.answer("üì¢ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")

@dp.message_handler(state=ReportState.waiting_for_report)
async def process_report(message: types.Message, state: FSMContext):
    report_text = message.text
    user = await get_user(message.from_user.id)
    
    if user:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
    
    await state.finish()

@dp.message_handler(commands=["FAQ"])
async def faq_command(message: types.Message):
    faq_text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    faq_text += "1Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n‚û° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start!\n\n"
    faq_text += "2Ô∏è‚É£ –ì–¥–µ –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?\n‚û° –í–≤–µ–¥–∏ /stats!\n\n"
    faq_text += "3Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è?\n‚û° –ò—Å–ø–æ–ª—å–∑—É–π /next-level!\n\n"
    faq_text += "4Ô∏è‚É£ –ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ?\n‚û° –í–≤–µ–¥–∏ /report –∏ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É!\n\n"
    faq_text += "5Ô∏è‚É£ –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω?\n‚û° –û—Ç–∫—Ä–æ–π Mini App –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ö–∞–∫–∞—Ç–æ–Ω!\n\n"
    faq_text += "6Ô∏è‚É£ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É?\n‚û° –í Mini App –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É'!\n\n"
    faq_text += "7Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã?\n‚û° –£—á–∞—Å—Ç–≤—É–π –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞!"
    
    await message.answer(faq_text)

@dp.message_handler(commands=["notifications"])
async def notifications_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return
    
    notifications = await get_user_notifications(user)
    
    if not notifications:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return
    
    notifications_text = "üì¨ –¢–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
    
    for i, notification in enumerate(notifications, 1):
        notifications_text += f"{i}. {notification.title}\n{notification.message}\n\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data="read_all_notifications"))
    
    await message.answer(notifications_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "read_all_notifications")
async def process_read_all_notifications(callback_query: types.CallbackQuery):
    user = await get_user(callback_query.from_user.id)
    if not user:
        await callback_query.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await sync_to_async(lambda: UserNotification.objects.filter(user=user, is_read=False).update(is_read=True))()
    
    await callback_query.answer("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!")
    await bot.edit_message_text(
        "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!",
        callback_query.from_user.id,
        callback_query.message.message_id
    )

@dp.message_handler(commands=["upcoming"])
async def upcoming_hackathons_command(message: types.Message):
    hackathons = await get_upcoming_hackathons()
    
    if not hackathons:
        await message.answer("–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤.")
        return
    
    hackathons_text = "üöÄ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω—ã:\n\n"
    
    for hackathon in hackathons:
        hackathons_text += f"üèÜ {hackathon.name}\n"
        hackathons_text += f"üìÖ –î–∞—Ç–∞: {hackathon.start_hackathon} - {hackathon.end_hackathon}\n"
        hackathons_text += f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {hackathon.prize_pool}\n"
        hackathons_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {hackathon.participants_count}\n\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ Mini App", web_app=WebAppInfo(url=f"{WEB_APP_URL}/hackathons")))
    
    await message.answer(hackathons_text, reply_markup=keyboard)

@dp.message_handler(commands=["my_hackathons"])
async def my_hackathons_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return
    
    hackathons = await get_user_hackathons(user)
    
    if not hackathons:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö.")
        return
    
    hackathons_text = "üèÜ –¢–≤–æ–∏ —Ö–∞–∫–∞—Ç–æ–Ω—ã:\n\n"
    
    for hackathon in hackathons:
        status_text = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π" if hackathon.start_hackathon > timezone.now().date() else (
            "–ê–∫—Ç–∏–≤–Ω—ã–π" if hackathon.end_hackathon >= timezone.now().date() else "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
        )
        
        hackathons_text += f"üèÜ {hackathon.name}\n"
        hackathons_text += f"üìÖ –î–∞—Ç–∞: {hackathon.start_hackathon} - {hackathon.end_hackathon}\n"
        hackathons_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ Mini App", web_app=WebAppInfo(url=f"{WEB_APP_URL}/profile")))
    
    await message.answer(hackathons_text, reply_markup=keyboard)

@dp.message_handler(commands=["request_hackathon"])
async def request_hackathon_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return
    
    await HackathonRequestState.waiting_for_title.set()
    await message.answer("üèÜ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞\n\n–®–∞–≥ 1/6: –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞:")

@dp.message_handler(state=HackathonRequestState.waiting_for_title)
async def process_hackathon_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    
    await HackathonRequestState.waiting_for_description.set()
    await message.answer("–®–∞–≥ 2/6: –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞:")

@dp.message_handler(state=HackathonRequestState.waiting_for_description)
async def process_hackathon_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    
    await HackathonRequestState.waiting_for_start_date.set()
    await message.answer("–®–∞–≥ 3/6: –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ö–∞–∫–∞—Ç–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")

@dp.message_handler(state=HackathonRequestState.waiting_for_start_date)
async def process_hackathon_start_date(message: types.Message, state: FSMContext):
    try:
        start_date = timezone.datetime.strptime(message.text, "%Y-%m-%d").date()
        
        if start_date < timezone.now().date():
            await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
        
        async with state.proxy() as data:
            data['start_date'] = start_date
        
        await HackathonRequestState.waiting_for_end_date.set()
        await message.answer("–®–∞–≥ 4/6: –í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

@dp.message_handler(state=HackathonRequestState.waiting_for_end_date)
async def process_hackathon_end_date(message: types.Message, state: FSMContext):
    try:
        end_date = timezone.datetime.strptime(message.text, "%Y-%m-%d").date()
        
        async with state.proxy() as data:
            if end_date <= data['start_date']:
                await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
            
            data['end_date'] = end_date
        
        await HackathonRequestState.waiting_for_participants.set()
        await message.answer("–®–∞–≥ 5/6: –í–≤–µ–¥–∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

@dp.message_handler(state=HackathonRequestState.waiting_for_participants)
async def process_hackathon_participants(message: types.Message, state: FSMContext):
    try:
        participants = int(message.text)
        
        if participants <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return
        
        async with state.proxy() as data:
            data['participants'] = participants
        
        await HackathonRequestState.waiting_for_prize_pool.set()
        await message.answer("–®–∞–≥ 6/6: –í–≤–µ–¥–∏ –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ (–≤ —Ä—É–±–ª—è—Ö):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ:")

@dp.message_handler(state=HackathonRequestState.waiting_for_prize_pool)
async def process_hackathon_prize_pool(message: types.Message, state: FSMContext):
    try:
        prize_pool = int(message.text)
        
        if prize_pool < 0:
            await message.answer("–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return
        
        async with state.proxy() as data:
            data['prize_pool'] = prize_pool
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirmation_text = "üìã –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\n\n"
        confirmation_text += f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        confirmation_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        confirmation_text += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data['start_date']}\n"
        confirmation_text += f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['end_date']}\n"
        confirmation_text += f"üë• –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['participants']}\n"
        confirmation_text += f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {data['prize_pool']} —Ä—É–±.\n\n"
        confirmation_text += "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data="confirm_hackathon_request"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_hackathon_request")
        )
        
        await HackathonRequestState.waiting_for_confirmation.set()
        await message.answer(confirmation_text, reply_markup=keyboard)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ:")

@dp.callback_query_handler(lambda c: c.data == "confirm_hackathon_request", state=HackathonRequestState.waiting_for_confirmation)
async def confirm_hackathon_request(callback_query: types.CallbackQuery, state: FSMContext):
    user = await get_user(callback_query.from_user.id)
    if not user:
        await callback_query.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await state.finish()
        return
    
    async with state.proxy() as data:
        await create_hackathon_request(
            user=user,
            title=data['title'],
            description=data['description'],
            start_date=data['start_date'],
            end_date=data['end_date'],
            participants=data['participants'],
            prize_pool=data['prize_pool']
        )
    
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await bot.send_message(
        callback_query.from_user.id,
        "‚úÖ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–∏–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
    )
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "cancel_hackathon_request", state=HackathonRequestState.waiting_for_confirmation)
async def cancel_hackathon_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ö–∞–∫–∞—Ç–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /request_hackathon."
    )
    
    await state.finish()

@dp.message_handler(commands=["setpicture"])
async def setpicture_command(message: types.Message):
    await message.answer("üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
