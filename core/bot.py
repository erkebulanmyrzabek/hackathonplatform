import os
import django
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()

from user.models import User

TOKEN = settings.TOKEN
WEB_APP_URL = "https://bd36-92-47-231-47.ngrok-free.app/feed"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@sync_to_async
def get_or_create_user(telegram_id, name):
    user, created = User.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name, "hash_code": uuid.uuid4().hex[:16]},
    )
    return user

@sync_to_async
def get_user(telegram_id):
    try:
        return User.objects.get(telegram_id=telegram_id)
    except ObjectDoesNotExist:
        return None

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name or message.from_user.username

    user = await get_or_create_user(telegram_id, name)
    user_url = f"{WEB_APP_URL}?hash={user.hash_code}"

    keyboard = InlineKeyboardMarkup()
    web_app_button = InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=user_url))
    keyboard.add(web_app_button)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:", reply_markup=keyboard)

@dp.message_handler(commands=["stats"])
async def stats_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        await message.answer(f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüèÜ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n‚≠ê XP: {user.xp}")
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=["next-level"])
async def next_level_command(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        xp_needed = (user.level + 1) * 100 - user.xp
        await message.answer(f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å {xp_needed} XP!")
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=["report"])
async def report_command(message: types.Message):
    await message.answer("üì¢ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –º–æ–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @erkemyrzaa")

@dp.message_handler(commands=["FAQ"])
async def faq_command(message: types.Message):
    faq_text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n1Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n‚û° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start!\n2Ô∏è‚É£ –ì–¥–µ –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?\n‚û° –í–≤–µ–¥–∏ /stats!\n3Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è?\n‚û° –ò—Å–ø–æ–ª—å–∑—É–π /next-level!\n4Ô∏è‚É£ –ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ?\n‚û° –í–≤–µ–¥–∏ /report –∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    await message.answer(faq_text)

@dp.message_handler(commands=["setpicture"])
async def setpicture_command(message: types.Message):
    await message.answer("üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
